-- Qualified constants and template instantiations

-- Qualified constants are constant names separated by ::. Names can
-- be identifiers but also template instantiations, of the form

--     ident < typelist >

-- where a typelist is a comma-separated list of types. Thus possible
-- qualified constants include

--     std::cout
--     std::vector<int>::const_iterator

-- One simple way to implement qualified constants is as nonempty
-- lists separated by ::. The elements of the list are identifiers and
-- template instantiations. Single identifier expressions come out as
-- a special case of these lists.
--QualifiedConstElems. QualifiedConst ::= [QualifiedConstElem] ;
--separator nonempty QualifiedConstElem "::" ;

QualifiedConstElems . Exp16 ::= [QualifiedConstElem] ;
separator QualifiedConstElem "::" ;

QualifiedConstElemId . QualifiedConstElem ::= Id ;
QualifiedConstElemT . QualifiedConstElem ::= Id "<" [Types] ">" ;
separator Types "," ;
TypeListElem . Types ::= Type ;

-- Types

-- Types are either qualified constants (including plain identifiers),
-- or type references, or built-in types, of which we include the
-- following:

--     bool
--     double
--     int
--     void
TBool. Type ::= "bool" ;
TDouble. Type ::= "double" ;
TInt. Type ::= "int" ;
TString. Type ::= "string" ;
TVoid. Type ::= "void" ;

-- Defines the highest precedence level
coercions Exp 16 ;
separator Exp "," ;

-- Literals

-- We include single-quoted character literals, double-quoted string
-- literals, integer literals, and floating point literals.

-- A string literal may consist of many can be concatenated strings
-- and in this way divided over lines:

--     "hello " "my little "
--     "world"

-- TODO see EString

-- FIXME Change names
StringElemx . StringElem ::= String ;
EString . Exp16 ::= [StringElem] ;
terminator nonempty StringElem "" ;


-- Identifiers

-- An identifier is a letter followed by a list of letters, digits,
-- and underscores.
token Id (letter (letter | digit | '_')*) ;

-- Comments

-- There are three kinds of comments.
--    anything between tokens /* and */
--    anything from token // to the end of a line or the file
--    anything from token # to the end of a line or the file (preprocessor directive)

comment "//" ;
comment "#" ;
comment "/*" "*/" ;