entrypoints Program;
Program. Program ::= [Def];
terminator Def "";

Inline. Inline   ::= "inline";
FBody . FBody    ::= Type Id "(" [Arg] ")" ;
DFunWB.   Def    ::= FBody ";";
DFunWBI.   Def   ::= Inline FBody ";";
DFun.    Def     ::= FBody "{" [Stm] "}";
DFunI.    Def    ::= Inline FBody "{" [Stm] "}";
DTDef.   Def     ::= TDef;
DVariable. Def   ::= Variable ";";
DStruct. Def     ::= Struct;
DUsing.  Def     ::= "using" QualifiedConst ";";
TypeDef. TDef    ::= "typedef" Type Id ";";

separator Arg ",";
terminator Stm "";

SDWhile. Stm  ::= "do" Stm "while" "(" Exp ")";
SWhile.   Stm ::= "while" "(" Exp ")" Stm;
SFor.   Stm   ::= "for" "(" Variable ";" Exp ";" Exp ")" Stm;
SIf.      Stm ::= "if" "(" Exp ")" Stm;
SReturn.  Stm ::= "return" Exp ";";
SIfE.  Stm    ::= "if" "(" Exp ")" Stm "else" Stm;

SExp.  Stm       ::= Exp ";";
SVariable. Stm   ::= Variable ";";
SEmpty. Stm      ::= ";";
SBlock. Stm      ::= "{" [Stm] "}";
STDef.   Stm     ::= TDef;
SStruct. Stm     ::= Struct;

EStr.   Exp16 ::= [String];
separator nonempty String "";

EInt. Exp16 ::= Integer;
EDouble. Exp16 ::= Double;
EChar. Exp16 ::= Char;
ETrue. Exp16 ::= "true";
EFalse. Exp16 ::= "false";
EIdx. Exp15 ::= Exp16 "[" Exp "]";
ECall. Exp15 ::= Exp16 "(" [Exp] ")";
EDot. Exp14 ::= Exp14 "." Exp15;
EArrow. Exp14 ::= Exp14 "->" Exp15;
EPostIncr. Exp14 ::= Exp15 "++";
EPostDecr. Exp14 ::= Exp15 "--";
EDeref. Exp14 ::= "*" Exp15;
ENeg. Exp13 ::= "!" Exp14;
EPreIncr. Exp13 ::= "++" Exp14;
EPreDecr. Exp13 ::= "--" Exp14;
ENumNeg. Exp13 ::= "-" Exp14;
EMod. Exp12 ::= Exp12 "%" Exp13;
EMul. Exp12 ::= Exp12 "*" Exp13;
EDiv. Exp12 ::= Exp12 "/" Exp13; 
EAdd. Exp11 ::= Exp11 "+" Exp12;
ESub. Exp11 ::= Exp11 "-" Exp12;
ELShift. Exp10 ::= Exp10 "<<" Exp11;
ERShift. Exp10 ::= Exp10 ">>" Exp11;
ELt. Exp9 ::= Exp9 "<"  Exp10;
EGt. Exp9 ::= Exp9 ">"  Exp10;
ELtEq. Exp9 ::= Exp9 "<=" Exp10;
EGtEq. Exp9 ::= Exp9 ">=" Exp10;
EEq. Exp8 ::= Exp8 "==" Exp9;
ENeq. Exp8 ::= Exp8 "!=" Exp9;
EOr. Exp4 ::= Exp4 "&&" Exp5;
EAnd. Exp3 ::= Exp3 "||" Exp4;
EAss. Exp2 ::= Exp3 "=" Exp2;
EAssAdd. Exp2 ::= Exp3 "+=" Exp2;
EAssSub. Exp2 ::= Exp3 "-=" Exp2;
ECond. Exp2 ::= Exp2 "?" Exp2 ":" Exp2;
EException. Exp1 ::= "throw" Exp2;

coercions Exp 16;
separator Exp ",";

rules PType   ::= "bool" | "int" | "double" | "void";
TRef. Type    ::= Type "&";
TBool. Type   ::= PType ;
TQConst. Type ::= QualifiedConst;
TConst . T    ::= "const" Type ;

TypeListElem . Types                            ::= Type ;
QualifiedConstElemId . QualifiedConstElem       ::= Id;
QualifiedConstElemInstance . QualifiedConstElem ::= Id "<" [Types] ">" ;
separator nonempty Types "," ;

EQualifiedConst . Exp16              ::= QualifiedConst ;
QualifiedConstElems . QualifiedConst ::= [QualifiedConstElem] ;
separator nonempty QualifiedConstElem "::" ;

VConst. Variable  ::= T;
VDeclT.  Variable ::= T Id;
VDecl. Variable   ::= Type Id;
VDeclsT. Variable ::= T Id "," [Id];
VDecls. Variable  ::= Type Id "," [Id];
VInitT.  Variable ::= T Id "=" Exp;
VInit. Variable   ::= Type Id "=" Exp;
separator nonempty Id ",";

AConst. Arg  ::= T;
AType.  Arg  ::= Type;
AName.  Arg  ::= Type Id;
ANameT. Arg  ::= T Id;
AInitT. Arg  ::= T Id "=" Exp;
AInit.  Arg  ::= Type Id "=" Exp;

BStruct. Struct       ::= "struct" Id "{" [Member] "}" ";";
SMemberDecl . Member  ::= T Id ;
SMemberDeclT . Member ::= Type Id ;
terminator Member ";" ;

comment "//";
comment "#";
comment "/*" "*/";

token Id (letter (letter | digit | '_')*);