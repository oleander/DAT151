---- A program ----
entrypoints Program;
DProgram. Program ::= [Def];
terminator Def "";

comment "//";
comment "#";
comment "/*" "*/";
position token Id (letter (letter | digit | '_')*);

---- Definitions ----
-- Functions

-- TODO Body
Inline. Inline ::= "inline";

FBody . FBody ::= Type Id "(" [Arg] ")" ;
DProt.   Def ::= FBody ";";
DProtI.   Def ::= Inline FBody ";";
DFun.    Def ::= FBody "{" [Stmt] "}";
DFunI.    Def ::= Inline FBody "{" [Stmt] "}";
DTDef.   Def ::= TDef;
DVar.    Def ::= Var ";";
DStruct. Def ::= Struct;
DUsing.  Def ::= "using" QConst ";";
separator Arg ",";
terminator Stmt "";

---- Statements ----
-- Prefixed by 'S'

-- Control structures
SReturn.  Stmt ::= "return" Expr ";";
SDoWhile. Stmt ::= "do" Stmt "while" "(" Expr ")";
SWhile.   Stmt ::= "while" "(" Expr ")" Stmt;
SIf.      Stmt ::= "if" "(" Expr ")" Stmt;
SIfElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt;
SFor.   Stmt ::= "for" "(" Var ";" Expr ";" Expr ")" Stmt;

-- Various
SExpr.  Stmt ::= Expr ";";
SVar.   Stmt ::= Var ";";
SEmpty. Stmt ::= ";";
SBlock. Stmt ::= "{" [Stmt] "}";
STDef.   Stmt ::= TDef;
SStruct. Stmt ::= Struct;

---- Expressions ----
-- Prefixed by 'E'

-- Literals
EInt.   Expr16 ::= Integer;
EDbl.   Expr16 ::= Double;
EChar.  Expr16 ::= Char;
EStr.   Expr16 ::= [String];
separator nonempty String "";
ETrue.  Expr16 ::= "true";
EFalse. Expr16 ::= "false";
EQConst. Expr16 ::= QConst; -- needs level16 since includes ID, to avoid reduce-reduce conflict

EIdx.    Expr15 ::= Expr16 "[" Expr "]";
ECall.   Expr15 ::= Expr16 "(" [Expr] ")";

EDot.      Expr14 ::= Expr14 "." Expr15;
EArrow.    Expr14 ::= Expr14 "->" Expr15;

EPostIncr. Expr14 ::= Expr15 "++";
EPostDecr. Expr14 ::= Expr15 "--";
EDeref.    Expr14 ::= "*" Expr15;

ENeg.     Expr13 ::= "!" Expr14;
EPreIncr. Expr13 ::= "++" Expr14;
EPreDecr. Expr13 ::= "--" Expr14;
ENumNeg.  Expr13 ::= "-" Expr14;

EMod. Expr12 ::= Expr12 "%" Expr13;
EMul. Expr12 ::= Expr12 "*" Expr13;
EDiv. Expr12 ::= Expr12 "/" Expr13; 

EAdd. Expr11 ::= Expr11 "+" Expr12;
ESub. Expr11 ::= Expr11 "-" Expr12;

ELsh. Expr10 ::= Expr10 "<<" Expr11;
ERsh. Expr10 ::= Expr10 ">>" Expr11;

ELt.  Expr9 ::= Expr9 "<"  Expr10;
EGt.  Expr9 ::= Expr9 ">"  Expr10;
ELte. Expr9 ::= Expr9 "<=" Expr10;
EGte. Expr9 ::= Expr9 ">=" Expr10;

EEq.  Expr8 ::= Expr8 "==" Expr9;
ENeq. Expr8 ::= Expr8 "!=" Expr9;

EAnd. Expr4 ::= Expr4 "&&" Expr5;

EAnd. Expr3 ::= Expr3 "||" Expr4;

EAss.   Expr2 ::= Expr2 "=" Expr3;
EIAss.  Expr2 ::= Expr2 "+=" Expr3;
EDAss.  Expr2 ::= Expr2 "-=" Expr3;
EInlIf. Expr2 ::= Expr2 "?" Expr2 ":" Expr2;

EThrow. Expr1 ::= "throw" Expr2;

coercions Expr 16;
separator Expr ",";

---- Types ----
TRef.    Type ::= Type "&";
TBool.   Type ::= "bool";
TDbl.    Type ::= "double";
TInt.    Type ::= "int";
TVoid.   Type ::= "void";
TQConst. Type ::= QConst;
TConst . T ::= "const" Type ;

---- Shared stuff ----

-- Qualified constants
DQConst. QConst ::= [Const];
separator nonempty Const "::";
QCId.    Const ::= Id;
QCConst. Const ::= Id "<" [Type] ">";
separator nonempty Type ",";

-- TypeDef
TDef. TDef ::= "typedef" Type Id ";";

-- Variables
VConst. Var  ::= "const" Var;
VDecl.  Var ::= Type Id;
VDecls. Var ::= Type Id "," [Id];
VInit.  Var ::= Type Id "=" Expr;
separator nonempty Id ",";

-- Arguments
AConst. Arg ::= T;
AType. Arg ::= Type;
ANameP. Arg ::= Type Id;
AName. Arg ::= T Id;
AInitA. Arg ::= T Id "=" Expr;
AInit. Arg ::= Type Id "=" Expr;

-- Structs
Struct. Struct ::= "struct" Id "{" [Def] "}" ";";